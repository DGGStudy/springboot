1.spring事物分类
  Spring提供了对编程式事务和声明式事务的支持，编程式事务允许用户在代码中精确定义事务的边界，而声明式事务（基于AOP）有助于用户将操作与事务规则进行解耦。 
  简单地说，编程式事务侵入到了业务代码里面，但是提供了更加详细的事务管理；而声明式事务由于基于AOP，所以既能起到事务管理的作用，又可以不影响业务代码的具体实现。
  
2.事物的四个特性：ACID
    原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。
    一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。
                          在现实中的数据不应该被破坏。
    隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。
    持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。
                         通常情况下，事务的结果被写到持久化存储器中。

2.spring事物原理
  Spring事务的本质其实就是数据库对事务的支持，没有数据库的事务支持，spring是无法提供事务功能的。对于纯JDBC操作数据库，想要用到事务，可以按照以下步骤进行：
    1.获取连接 Connection con = DriverManager.getConnection()
    2.开启事务con.setAutoCommit(true/false);
    3.执行CRUD
    4.提交事务/回滚事务 con.commit() / con.rollback();
    5.关闭连接 conn.close();
   使用Spring的事务管理功能后，我们可以不再写步骤 2 和 4 的代码，而是由Spirng自动完成。
   解决 CRUD 之前和之后开启事务和关闭事务这个问题，也就可以从整体上理解Spring的事务管理实现原理了。以注解方式为例子：
      1.配置文件开启注解驱动，在相关的类和方法上通过注解@Transactional标识。
      2.spring 在启动的时候会去解析生成相关的bean，这时候会查看拥有相关注解的类和方法，并且为这些类和方法生成代理，并根据@Transaction的相关参数进行相关
        配置注入，这样就在代理中把相关的事务处理掉（开启正常提交事务，异常回滚事务）。
      3.真正的数据库层的事务提交和回滚是通过binlog或者redo log实现的。
