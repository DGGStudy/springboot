1.整合log4j日志记录
  a.添加依赖
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-log4j</artifactId>
        <version>1.3.8.RELEASE</version>
    </dependency>
    
  b.首先在resources目录下创建文件log4j.properties文件：
      # Log4j配置
        log4j.rootCategory=INFO,stdout

        # 控制台输出
        log4j.appender.stdout=org.apache.log4j.ConsoleAppender
        log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
        log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n
  
  c.使用log4j
      import org.slf4j.Logger;
      import org.slf4j.LoggerFactory;
      import org.springframework.web.bind.annotation.RequestMapping;
      import org.springframework.web.bind.annotation.RestController;

      @RestController
      public class HelloController{

          private static final Logger logger = LoggerFactory.getLogger(HelloController.class);

          @RequestMapping("hello")
          public String hello() throws JsonProcessingException {
              logger.info("hello world");
              return "hello world";
          }
      }

2.使用AOP统一处理web日志请求
    a.添加依赖
      <dependency>
       <groupId>org.springframework.boot</groupId>
       <artifactId>spring-boot-starter-aop</artifactId>
      </dependency>
      
    b.编写切面类
    
      实现AOP的切面主要有以下几个要素：
        使用@Aspect注解将一个java类定义为切面类
        使用@Pointcut定义一个切入点，可以是一个规则表达式，比如下例中某个package下的所有函数，也可以是一个注解等。
      根据需要在切入点不同位置的切入内容
        使用@Before在切入点开始处切入内容
        使用@After在切入点结尾处切入内容
        使用@AfterReturning在切入点return内容之后切入内容（可以用来对处理返回值做一些加工处理）
        使用@Around在切入点前后切入内容，并自己控制何时执行切入点自身的内容
        使用@AfterThrowing用来处理当切入内容部分抛出异常之后的处理逻辑
      
      package com.example.aop;
      import org.aspectj.lang.JoinPoint;
      import org.aspectj.lang.annotation.AfterReturning;
      import org.aspectj.lang.annotation.Aspect;
      import org.aspectj.lang.annotation.Before;
      import org.aspectj.lang.annotation.Pointcut;
      import org.slf4j.Logger;
      import org.slf4j.LoggerFactory;
      import org.springframework.stereotype.Component;
      import org.springframework.web.context.request.RequestContextHolder;
      import org.springframework.web.context.request.ServletRequestAttributes;

      import javax.servlet.http.HttpServletRequest;
      import java.util.Enumeration;

      @Aspect
      @Component
      public class WebLogAspect {

          private Logger logger = LoggerFactory.getLogger(getClass());

          @Pointcut("execution(public * com.example.aop.controller..*.*(..))")
          public void weblog(){
          
          }

          @Before("weblog()")
          public void doBefore(JoinPoint joinPoint){
              // 接收到请求，记录请求内容
              ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
              HttpServletRequest request = attributes.getRequest();
              // 记录下请求内容
              logger.info("url    : " + request.getRequestURL().toString());
              logger.info("method : " + request.getMethod());
              logger.info("ip     : " + request.getRemoteAddr());
              Enumeration<String> enu = request.getParameterNames();
              while (enu.hasMoreElements()) {
                  String name = (String) enu.nextElement();
                  logger.info("key:{},value:{}", name, request.getParameter(name));
              }
          }

          @AfterReturning(returning = "response", pointcut = "weblog()")
          public void doAfterReturning(Object response) throws Throwable {
              // 处理完请求，返回内容
              logger.info("response : " + response);
              }
          }

      
      
    
